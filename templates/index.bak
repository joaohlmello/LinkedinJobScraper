{% extends "base.html" %}
{% block title %}LinkedIn Job Scraper{% endblock %}

{% block custom_head %}
<style>
    .form-control {
        margin-bottom: 15px;
    }
    .job-box {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 15px;
    }
    .spin {
        animation: spin 2s linear infinite;
    }
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    #progress-container {
        display: none;
        margin-top: 20px;
    }
    .batch-item {
        padding: 10px;
        margin-bottom: 5px;
        border-radius: 5px;
        background-color: var(--bs-dark);
        border: 1px solid var(--bs-secondary);
    }
    .batch-item:hover {
        background-color: var(--bs-gray-800);
    }
    .batch-info {
        font-size: 0.9em;
        color: var(--bs-secondary);
    }
    .batch-action {
        display: flex;
        gap: 5px;
    }
    #batches-container {
        max-height: 300px;
        overflow-y: auto;
        margin-bottom: 15px;
    }
    .error-batch {
        border-color: var(--bs-danger);
    }
    #job-queue-badge {
        vertical-align: middle;
    }
</style>
{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <h1 class="mb-4"><i class="bi bi-linkedin"></i> LinkedIn Job Scraper</h1>

            <div class="card mb-4">
                <div class="card-header bg-dark">
                    <h5 class="mb-0"><i class="bi bi-link-45deg"></i> URLs de Vagas do LinkedIn</h5>
                </div>
                <div class="card-body">
                    <form id="scrape-form" method="post" action="/">
                        <div class="form-group">
                            <label for="linkedin_urls">Cole as URLs das vagas (uma por linha):</label>
                            <textarea class="form-control" id="linkedin_urls" name="linkedin_urls" rows="8" placeholder="https://www.linkedin.com/jobs/view/XXXXXXXXXX">{{ linkedin_urls }}</textarea>
                        </div>

                        <div class="form-group mt-3">
                            <label for="ignore_urls">URLs a ignorar (uma por linha):</label>
                            <textarea class="form-control" id="ignore_urls" name="ignore_urls" rows="3" placeholder="URLs que você deseja ignorar no processamento">{{ ignore_urls }}</textarea>
                        </div>

                        <div class="row mt-3">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="batch_size">Tamanho do lote:</label>
                                    <select class="form-select" id="batch_size" name="batch_size">
                                        <option value="5" {% if batch_size == 5 %}selected{% endif %}>5 URLs por lote</option>
                                        <option value="10" {% if batch_size == 10 %}selected{% endif %}>10 URLs por lote</option>
                                        <option value="20" {% if batch_size == 20 %}selected{% endif %}>20 URLs por lote</option>
                                        <option value="50" {% if batch_size == 50 %}selected{% endif %}>50 URLs por lote</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check mt-4">
                                    <input class="form-check-input" type="checkbox" value="true" id="analyze_jobs" name="analyze_jobs" {% if analyze_jobs %}checked{% endif %}>
                                    <label class="form-check-label" for="analyze_jobs">
                                        Analisar vagas com Gemini AI
                                    </label>
                                </div>
                            </div>
                        </div>

                        <div class="d-grid gap-2 d-md-flex mt-3">
                            <button type="submit" id="submit-button" class="btn btn-primary">
                                <i class="bi bi-search"></i> Processar URLs
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <div id="progress-container" class="card mb-4">
                <div class="card-header bg-dark">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5><i class="bi bi-arrow-repeat spin"></i> <span id="progress-status">Processando...</span> <button id="reset-processing-btn" class="btn btn-sm btn-danger ms-2 d-none">Reiniciar Processamento</button></h5>
                        <span class="badge bg-info" id="job-queue-badge">Fila: <span id="job-queue-count">0</span></span>
                    </div>
                </div>
                <div class="card-body">
                    <p id="progress-message">Inicializando processamento...</p>

                    <div class="progress mb-3">
                        <div id="progress-bar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                    </div>

                    <p>Lote <span id="current-batch">0</span> de <span id="total-batches">0</span> (Total processado: <span id="processed-batches">0</span>)</p>

                    <div id="batch-progress" class="progress">
                        <div id="total-progress-bar" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                    </div>

                    <div id="batches-container" class="mt-4">
                        <h5>Lotes Processados</h5>
                        <div id="batches-list"></div>
                    </div>
                </div>
            </div>

            <div id="output-container">
                {% if results_html %}
                <div class="card mb-4">
                    <div class="card-header bg-dark">
                        <h5 class="mb-0"><i class="bi bi-table"></i> Resultados</h5>
                    </div>
                    <div class="card-body">
                        {{ results_html|safe }}
                    </div>
                </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<!-- Templates para batches processados -->
<template id="batch-template">
    <div class="batch-item">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <strong>Lote #<span class="batch-index"></span></strong>
                <span class="badge bg-secondary ms-2"><span class="batch-urls-count"></span> URLs</span>
                <span class="batch-error-badge badge bg-danger ms-2 d-none">Erro</span>
            </div>
            <div class="batch-action">
                <a href="#" class="btn btn-sm btn-outline-primary batch-download-btn">
                    <i class="bi bi-file-earmark-arrow-down"></i> CSV
                </a>
            </div>
        </div>
        <div class="batch-info mt-1">
            Processado em <span class="batch-created-at"></span>
        </div>
    </div>
</template>

{% include "modals.html" %}

{% endblock %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Inicializar os elementos do DOM
        const form = document.getElementById('scrape-form');
        const submitButton = document.getElementById('submit-button');
        const progressContainer = document.getElementById('progress-container');
        const progressBar = document.getElementById('progress-bar');
        const totalProgressBar = document.getElementById('total-progress-bar');
        const progressMessage = document.getElementById('progress-message');
        const progressStatus = document.getElementById('progress-status');
        const currentBatchSpan = document.getElementById('current-batch');
        const totalBatchesSpan = document.getElementById('total-batches');
        const processedBatchesSpan = document.getElementById('processed-batches');
        const batchesContainer = document.getElementById('batches-container');
        const batchesList = document.getElementById('batches-list');
        const resetProcessingBtn = document.getElementById('reset-processing-btn');
        const jobQueueCount = document.getElementById('job-queue-count');
        const batchTemplate = document.getElementById('batch-template');
        const modal = new bootstrap.Modal(document.getElementById('error-modal'));
        const modalTitle = document.getElementById('error-modal-title');
        const modalBody = document.getElementById('error-modal-body');
        
        let progressInterval;
        
        // Evento de clique para reiniciar o processamento
        resetProcessingBtn.addEventListener('click', function() {
            if (confirm('Tem certeza que deseja reiniciar o processamento? Isso irá cancelar qualquer processamento em andamento.')) {
                fetch('/reset_processing', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Esconder o botão de reset
                        resetProcessingBtn.classList.add('d-none');
                        
                        // Atualizar mensagens
                        progressStatus.textContent = 'Reiniciado';
                        progressMessage.textContent = data.message || 'Processamento reiniciado com sucesso.';
                        
                        // Reativar o botão de envio após um pequeno delay
                        setTimeout(() => {
                            progressContainer.style.display = 'none';
                            submitButton.disabled = false;
                        }, 2000);
                    } else {
                        // Mostrar erro
                        alert('Erro ao reiniciar o processamento: ' + (data.message || 'Ocorreu um erro desconhecido.'));
                    }
                })
                .catch(error => {
                    console.error('Erro ao reiniciar processamento:', error);
                    alert('Erro ao reiniciar o processamento: ' + error.message);
                });
            }
        });
        
        // Função para verificar o progresso do processamento
        function checkProgress() {
            fetch('/check_progress')
                .then(response => response.json())
                .then(data => {
                    // Atualizar a barra de progresso do lote atual
                    let percent = data.percent || 0;
                    progressBar.style.width = `${percent}%`;
                    progressBar.textContent = `${percent}%`;
                    progressBar.setAttribute('aria-valuenow', percent);
                    
                    // Atualizar a barra de progresso total
                    let batchPercent = data.batch_percent || 0;
                    totalProgressBar.style.width = `${batchPercent}%`;
                    totalProgressBar.textContent = `${batchPercent}%`;
                    totalProgressBar.setAttribute('aria-valuenow', batchPercent);
                    
                    // Atualizar informações dos lotes
                    currentBatchSpan.textContent = data.current_batch || 0;
                    totalBatchesSpan.textContent = data.total_batches || 0;
                    processedBatchesSpan.textContent = data.processed_batches || 0;
                    
                    // Atualizar a mensagem de progresso
                    progressMessage.textContent = data.message || 'Processando...';
                    
                    // Gerenciar visibilidade do botão de reiniciar processamento
                    const processingTime = (Date.now() - window.processingStartedAt) / 1000; // tempo em segundos
                    if (data.status === 'processing' && processingTime > 60 && 
                        (data.current === data.total && data.total > 0) && 
                        (data.job_queue > 0 || data.current_batch < data.total_batches)) {
                        // Se o processamento estiver ativo por mais de 60 segundos e 
                        // o progresso atual do lote está parado no 100% mas ainda há mais lotes a processar,
                        // mostrar o botão de reiniciar
                        resetProcessingBtn.classList.remove('d-none');
                    } else {
                        resetProcessingBtn.classList.add('d-none');
                    }
                    
                    // Verificar se há lotes processados
                    if (data.batches_info && data.batches_info.length > 0) {
                        // Limpar a lista de lotes e adicionar os novos
                        batchesList.innerHTML = '';
                        data.batches_info.forEach(batch => {
                            const batchItem = document.importNode(batchTemplate.content, true);
                            
                            // Preencher os dados do lote
                            batchItem.querySelector('.batch-index').textContent = batch.batch_index;
                            batchItem.querySelector('.batch-urls-count').textContent = batch.urls_count;
                            batchItem.querySelector('.batch-created-at').textContent = new Date(batch.created_at).toLocaleString();
                            
                            // Configurar o link para download do CSV
                            const downloadBtn = batchItem.querySelector('.batch-download-btn');
                            downloadBtn.href = `/export/batch/${batch.batch_index}/csv`;
                            
                            // Marcar lotes com erro
                            if (batch.has_error) {
                                batchItem.querySelector('.batch-item').classList.add('error-batch');
                                batchItem.querySelector('.batch-error-badge').classList.remove('d-none');
                            }
                            
                            // Adicionar à lista
                            batchesList.appendChild(batchItem);
                        });
                        
                        // Mostrar o container de lotes
                        batchesContainer.style.display = 'block';
                    } else {
                        // Ocultar o container de lotes se não houver nenhum
                        batchesContainer.style.display = 'none';
                    }
                    
                    // Atualizar contador de jobs na fila
                    jobQueueCount.textContent = data.job_queue || 0;
                    
                    // Verificar o status do processamento
                    if (data.status === 'completed') {
                        // Parar de verificar o progresso
                        clearInterval(progressInterval);
                        
                        // Atualizar o status e liberar o botão submit
                        progressStatus.textContent = 'Concluído';
                        submitButton.disabled = false;
                        
                        // Se houver resultados, exibi-los
                        if (data.results) {
                            const outputHTML = data.results;
                            document.getElementById('output-container').innerHTML = outputHTML;
                        }
                    } else if (data.status === 'error') {
                        // Parar de verificar o progresso
                        clearInterval(progressInterval);
                        
                        // Atualizar o status e exibir a mensagem de erro
                        progressStatus.textContent = 'Erro';
                        progressMessage.textContent = data.message || 'Ocorreu um erro durante o processamento.';
                        
                        // Liberar o botão submit
                        submitButton.disabled = false;
                        
                        // Exibir modal com erro
                        modalTitle.textContent = 'Erro no Processamento';
                        modalBody.textContent = data.message || 'Ocorreu um erro durante o processamento.';
                        modal.show();
                    }
                    // Se estiver processando, continuar verificando
                })
                .catch(error => {
                    console.error('Erro ao verificar progresso:', error);
                });
        }
        
        // Processamento do formulário
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Desativar o botão submit e mostrar o container de progresso
            submitButton.disabled = true;
            progressContainer.style.display = 'block';
            
            // Inicializar as variáveis de progresso
            progressBar.style.width = '0%';
            progressBar.textContent = '0%';
            progressBar.setAttribute('aria-valuenow', 0);
            totalProgressBar.style.width = '0%';
            totalProgressBar.textContent = '0%';
            totalProgressBar.setAttribute('aria-valuenow', 0);
            progressStatus.textContent = 'Processando...';
            progressMessage.textContent = 'Inicializando processamento...';
            window.processingStartedAt = Date.now();
            
            // Enviar os dados do formulário via AJAX
            fetch('/process', {
                method: 'POST',
                body: new FormData(form)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Iniciar verificação de progresso
                    progressInterval = setInterval(checkProgress, 1000);
                } else {
                    // Exibir mensagem de erro
                    progressStatus.textContent = 'Erro ao iniciar processamento';
                    progressMessage.textContent = data.message || 'Ocorreu um erro.';
                    
                    // Reativar o botão submit
                    submitButton.disabled = false;
                }
            })
            .catch(error => {
                console.error('Erro ao enviar formulário:', error);
                progressStatus.textContent = 'Erro';
                progressMessage.textContent = 'Erro ao enviar formulário: ' + error.message;
                submitButton.disabled = false;
            });
        });
    });
</script>
{% endblock %}
